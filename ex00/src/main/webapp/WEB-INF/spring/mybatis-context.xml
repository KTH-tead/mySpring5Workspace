<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Connection Pool 관련 Bean 구성: HikariCP -->
	<!-- 스텝1: JDBC 정보 구성(이 방법이 2가지) -->
	<!-- [방법1] JDBC 정보를 직접 지정하는 구성 -->
	<!--
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="oracle.jdbc.OracleDriver"></property>
	<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"></property>
	<property name="username" value="book_ex"></property>
	<property name="password" value="book_ex"></property>
	</bean>
	-->
	
	<!-- log4jdbc-log4j2 적용(개발용) -->
	<!--
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
	<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"></property>
	<property name="username" value="book_ex"></property>
	<property name="password" value="book_ex"></property>
	</bean>
	-->
	
	<!-- [방법2] JDBC 정보를 jdbc.properties 파일에서 읽어 들이는 구성 -->
	<!-- 2-1. jdbc.properties 파일에서 읽어 들이는 PropertyPlaceholderConfigurer 클래스 빈 설정(스프링 5에서 Deprecated) -->
	<!-- <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
	<value>/WEB-INF/config/jdbc.properties</value>
	</property>
	</bean> -->

	<!-- 위의 빈 사용을 대체방법(Spring 5 이후) -->
	<!-- <context:property-placeholder location="/WEB-INF/jdbcConfig/jdbc.properties"/> -->
	<context:property-placeholder location="classpath:jdbcConfig/jdbc.properties"/>
	
	<!-- 2-2. HikariConfig 빈을 통해 데이터베이스 구성 정보를 읽어 들임 -->
	<!-- 서버 배포용
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<property name="driverClassName" value="${jdbcHikari.driverClassName}"></property>
	<property name="jdbcUrl" value="${jdbcHikari.jdbcUrl}"></property>
	<property name="username" value="${jdbcHikari.username}"></property>
	<property name="password" value="${jdbcHikari.password}"></property>
	</bean>
	-->

	<!-- log4jdbc-log4j2 적용(개발용) -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="${jdbcHikariLog.driverClassName}"></property>
		<property name="jdbcUrl" value="${jdbcHikariLog.jdbcUrl}"></property>
		<property name="username" value="${jdbcHikariLog.username}"></property>
		<property name="password" value="${jdbcHikariLog.password}"></property>
	</bean>
	
	<!-- 스텝2: HikariDataSource 클래스를 이용한 dataSource 빈 생성 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<!-- Connection Pool 관련 Bean 구성: MybatisCP -->
	<!-- [방법1] JDBC 정보를 직접 설정하여 dataSource 빈 구성 -->
	<!--
	<bean id="dataSource"
	class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	<property name="driver" value="oracle.jdbc.driver.OracleDriver" />
	<property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
	<property name="username" value="book_ex" />
	<property name="password" value="book_ex" />
	</bean>
	-->

	<!-- log4jdbc-log4j2 적용(개발용) -->
	<!--
	<bean id="dataSource"
	class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	<property name="driver" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
	<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:orcl" />
	<property name="username" value="book_ex" />
	<property name="password" value="book_ex" />
	</bean>
	-->
	
	<!-- [방법2] JDBC 정보를 jdbc.properties 파일에서 읽어 들여 dataSource 빈 구성 -->
	<!-- 2-1. jdbc.properties 파일에서 읽어 들이는 PropertyPlaceholderConfigurer 클래스 빈 설정 -->
	<!-- <context:property-placeholder location="/WEB-INF/jdbcConfig/jdbc.properties"/> -->
	<!-- <context:property-placeholder location="classpath:jdbcConfig/jdbc.properties"/> -->
	<!-- 2-2. PropertyPlaceholderConfigurer 클래스 빈을 통해 읽어 들인 JDBC 정보로 dataSource 빈 구성 -->
	<!--
	<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	<property name="driver" value="${jdbcIbatis.driverClassName}" />
	<property name="url" value="${jdbcIbatis.url}" />
	<property name="username" value="${jdbcIbatis.username}" />
	<property name="password" value="${jdbcIbatis.password}" />
	</bean>
	-->

	<!-- log4jdbc-log4j2 적용(개발용) -->
	<!--
	<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	<property name="driver" value="${jdbcIbatisLog.driverClassName}" />
	<property name="url" value="${jdbcIbatisLog.url}" />
	<property name="username" value="${jdbcIbatisLog.username}" />
	<property name="password" value="${jdbcIbatisLog.password}" />
	</bean>
	-->

	<!-- 구성된 데이터베이스 접속을 이용하여, SQL처리를 위한 sqlSessionFactory 빈 생성 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>

		<!-- <property name="configLocation" value="classpath:org/zerock/ex00/mapper/mybatisConfig.xml"/> -->

		<property name="mapperLocations">
			<list>
				<value>classpath:org/zerock/ex00/mapper/MyBoardMapper.xml</value>
				<value>classpath:org/zerock/ex00/mapper/MyBoardMapperDAO.xml</value>
				<value>classpath:org/zerock/ex00/mapper/MyReplyMapper.xml</value>
				<value>classpath:org/zerock/ex00/mapper/MyBoardAttachFileMapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- Mapper 인터페이스 클래스 자동 빈 생성 설정 -->
	<mybatis-spring:scan base-package="org.zerock.ex00.mapper" />

	<!-- MyBoardDAO용 : 세션 생성 빈(Mapper 인터페이스 사용 시에는 필요 없음) -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- 스프링 트랜잭션 기능 활성화 -->
	<tx:annotation-driven/>
	
	<!-- Spring Transaction 관리자 빈(dataSource빈을 주입 받음) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	
</beans>